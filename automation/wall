args = { ... }

function main()
    if #args ~= 2 then
        io.write("Usage: wall <length> <height>")
        return
    end

    length = tonumber(args[1])
    height = tonumber(args[2])

    io.write("Length is " .. length .. ".\n")
    io.write("Height is " .. height .. ".\n")

    moved = 0
    while (moved < length) do
        forward()

        dug = dig()
        pillar(dug + height)
--        wall()    

        moved = moved + 1
    end
end

-- Move forward one block, climb/descend as neccasary
function foward()
    turtle.forward()
end

-- Dig Down to bedrock
function dig()
    down = 0
    s, d = turtle.inspectDown()
    while not (s and d[name] == "minecraft:bedrock") do
        while turtle.down() do
            down = down + 1
            turtle.digDown()
            if turtle.getItemCount(12) > 0 then
                deposit()
            end
        end
        turtle.attackDown()
    end
    return down
end

-- Pillar back x blocks
function pillar(up)
    built = 0
    turtle.select(13)
    while built < up do
        while turtle.up() do
            while not turtle.placeDown() do
                turtle.restock()
            end
            built = built + 1
        end
        turtle.attackUp()
    end
end

-- Deposit all of the mined materials
function deposit()
    last_slot = turtle.getSelectedSlot()
    turtle.select(14)
    placeUp()
    i = 1
    while (i <= 12) do
        turtle.select(i)
        turtle.dropUp()
    end
    turtle.select(15)
    turtle.digUp()
    turtle.select(last_slot)
end

-- Restock Build Material
function restock()
    last_slot = turtle.getSelectedSlot()

    turtle.select(14)
    placeUp()
    turtle.suckUp()
    turtle.transferTo(13)
    turtle.dropUp()
    turtle.digUp()

    turtle.select(last_slot)
end

-- Restock Fuel 
function refuel()
    last_slot = turtle.getSelectedSlot()

    turtle.select(15)
    placeUp()
    turtle.suckUp()
    turtle.refuel(turtle.getItemCount())
    turtle.digUp()

    turtle.select(last_slot)
end

function placeUp()
    s = turtle.placeUp()
    while not s do
        turtle.attackUp()
        s = turtle.placeUp()
    end
end

main()
